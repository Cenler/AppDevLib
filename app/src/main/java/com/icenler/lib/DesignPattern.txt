设计模式详解：

》 开发流程：
    1、 找出类应该做的事情

    2、 列出实例变量和方法

    3、 编写方法的伪码

    4、 编写方法的测试用程序

    5、 实现类

    6、 测试方法

    7、 出错或重新设计

    * 伪码 > 测试码 > 真实码

》 设计原则：复用、扩展、维护
    1、 把可能需要变化的和不变的分离开来（物理隔离）

    2、 针对接口，不针对实现

    3、 多用组合，少用继承

    4、 低耦合，高内聚

    5、 开闭原则

    6、 依赖倒置原则

    7、 最少知识原则

    8、 好莱坞原则

    9、 单一职责原则

    *** http://geek.csdn.net/news/detail/51201 Android Studio 使用技巧

》 策略模式(Strategy Pattern)：
    - 它定义了算法家庭，分别封装起来。让它们之间可以互相替换，此模式让算法的变化，不会影响到使用算法的客户

》 观察者模式（Observer Pattern）：
    - 定义了对象之间的一对多依赖，这样一来，当一个对象改变状态时，它的所有依赖者都会收到通知并自动更新

》 装饰者模式（Decorator Pattern）：
    - 动态地将责任附加到对象上，若要扩展功能，装饰者将提供比继承更有弹性的替代方案

》 工厂方法模式（Factory Methed Pattern）：
    - 定义了一个创建对象的接口，但由子类决定要实例化的类是哪一个，即让类把实例化推迟到子类中

》 抽象工厂模式（Abstract Factory Pattern）：
    - 提供一个接口，用于创建相关或依赖对象的家族，而不需要明确指定具体类

》 单例模式(Singleton Pattern)：
    - 保证一个类仅有一个实例，并提供一个访问它的全局访问点

》 命令模式（Command Pattern）：
    - 将"请求"封装成对象，以便使用不同的请求队列或者日志来参数化其他对象

》 适配器模式(Adapter Pattern)：
    - 将一个类的接口转换成客户希望的另外一个接口. 适配器模式使得原本由于接口不兼容而不能一起工作的那些类可以一起工作

》 外观模式（Appearance Pattern）：
    - 外观定义了一个高层接口，让子系统更容易使用

》 模板方法(Template Pattern)：
    - 定义一个操作中的算法的骨架，而将一些步骤延迟到子类中，模板方法使得子类可以不改变一个算法的结构即可重定义该算法的某些特定步骤

》 迭代器模式：
    - 提供一种方法顺序的访问一个聚合对象中的各个元素，而又不暴露其内部的表示

》 组合模式(Composite Pattern)：
    - 将对象组合成树形结构以表示“部分-整体”的层次结构。组合模式使得用户对单个对象和组合对象的使用具有一致性

》 状态模式(State Pattern)：
    - 允许对象在内部状态改变时改变它的行为，对象看起来好像修改了它的类

》 代理模式(Proxy Pattern)：
    -
